<script src="js/dialog.js"></script>
<script src="js/project.js"></script>
<script src="js/inplace.js"></script>
<link rel="stylesheet" href="style/project.css">

<div class="project big">
    <div class="title">
        <h1></h1>
        <span class="remixed-from"></span>
    </div>
    <div class="viewer pure-g">
        <!-- Project viewer -->
        <div class="embed pure-u-1-2">
            <!-- Spinner shown while iframe hasn't been loaded -->
            <i class="project-loader fas fa-spinner fa-spin fa-3x" aria-hidden="true"></i>

            <!-- Project control bar -->
            <div class="controlbar">
                <i class="present-button fas fa-expand clickable" onclick="toggleFullScreen();"></i>
                <i class="start-button fas fa-flag clickable" onclick="runProject(event);"></i>
                <i class="stop-button fas fa-stop clickable" onclick="stopProject();"></i>
            </div>

            <!-- Project iframe placeholder -->
            <i class="iframe-placeholder"></i>

            <!-- Project Action Buttons -->
            <div class="buttons">
                <a localizable class="pure-button open" target="_blank">Edit</a>
                <a localizable class="pure-button download" target="_blank">Download</a>
                <a localizable class="pure-button share" target="_blank">Share</a>
                <a localizable class="pure-button unshare" target="_blank">Unshare</a>
                <a localizable class="pure-button publish" target="_blank">Publish</a>
                <a localizable class="pure-button unpublish" target="_blank">Unpublish</a>
                <a localizable class="pure-button embed-button" target="_blank">Embed</a>
                <a localizable class="pure-button collect" target="_blank">Add to Collection</a>
                <a localizable class="pure-button pure-button-warning flag" target="_blank">Report</a>
                <a localizable class="pure-button pure-button-warning delete" target="_blank">Delete</a>
            </div>
        </div>
        <!-- just a separator -->
        <i class="pure-u-1-24"></i>
        <div class="details pure-u-11-24">
            <!-- Notes -->
            <pre class="notes"> </pre>
            <!-- Dates and project meta -->
            <span class="dates">
                <span localizable class="created">Created on </span>.
                <span localizable class="updated">Last updated on </span><span localizable class="shared">, shared on </span><span localizable class="published"></span>.
                <span localizable class="is-public">This project is </span><span localizable class="is-published"></span>.
            </span>
        </div>
    </div>

    <!-- Carousel of remixes -->
    <div class="remixes">
@param pageSize=5
@param query=getRemixes
@param widgetName=remix_carousel
@param header="'Remixes'"
@param user='pageUser()'
@param extraParam='pageProject(),'
@include=project_grid
    </div>
    <!-- Carousel of collections -->
    <div class="collections">
@param pageSize=5
@param query=getCollectionsContainingProject
@param widgetName=collection_carousel
@param header="'Collections containing this project'"
@param user='pageUser()'
@param extraParam='pageProject(),'
@include=collection_grid
@param header=''
@param extraParam=''
    </div>
</div>

<script>
    beganLoading('#wrapper');
    SnapCloud.getProjectMetadata(
        pageProject(),
        pageUser(),
        function (project) {
            setTitle(pageProject() + localizer.localize(' by ') + pageUser() + ' - Snap! Build Your Own Blocks');

            // Fill up all fields
            var title = document.querySelector('.title h1');

            title.innerHTML = project.projectname;
            if (canRename(project)) {
                new InPlaceEditor(
                    title,
                    function () {
                        SnapCloud.updateProjectName(
                            pageProject(),
                            title.textContent,
                            function () { location.href = 'project.html?user=' + pageUser() + '&project=' + title.textContent; },
                            genericError
                        );
                    })
            }
            document.querySelector('.title').append(authorSpan(project.username));

            loadIframe = function () {
                var iframe = document.createElement('iframe'),
                    placeholder = document.querySelector('.iframe-placeholder');
                iframe.height = 406;
                iframe.src = projectURL(project.username, project.projectname) + '&embedMode&noExitWarning&noRun';
                placeholder.parentNode.replaceChild(iframe, placeholder);
            }

            if (document.visibilityState == 'visible') {
                loadIframe();
            } else {
                document.addEventListener('visibilitychange', function() {
                    loadIframe();
                    document.removeEventListener('visibilitychange');
                });
            }

            document.querySelector('.notes').innerHTML = project.notes || '<small>' + localizer.localize('This project has no notes') + '</small>';
            document.querySelector('.created').append(formatDate(project.created));
            document.querySelector('.updated').append(formatDate(project.lastupdated));

            if (project.ispublic) {
                document.querySelector('.shared').append(formatDate(project.lastshared));
                document.querySelector('.is-published').innerHTML += (project.ispublished ? ' and listed' : ' but unlisted');
                if (project.ispublished) {
                    document.querySelector('.published').innerHTML = localizer.localize(', published on ') + formatDate(project.firstpublished);
                }
                document.querySelector('.is-public').innerHTML += ('public');
            } else {
                document.querySelector('.shared').hidden = true;
                document.querySelector('.is-public').append('private');
            }

            if (project.remixedfrom) {
                var div = document.querySelector('.remixed-from');
                div.innerHTML = localizer.localize('(remixed from ');
                if (project.remixedfrom.projectname) {
                    div.append(projectSpan(project.remixedfrom.username, project.remixedfrom.projectname));
                    div.append(authorSpan(project.remixedfrom.username));
                } else {
                    div.append('a project that no longer exists');
                }
                div.innerHTML += ')';
            }

            // Set up all buttons
            document.querySelector('.buttons .share').hidden = project.ispublic || !canShare(project);
            document.querySelector('.buttons .unshare').hidden = !project.ispublic || !canShare(project);
            document.querySelector('.buttons .publish').hidden = (!project.ispublic || project.ispublished) ||
                                                                    !canPublish(project) || sessionStorage.role === 'banned';
            document.querySelector('.buttons .unpublish').hidden = (!project.ispublic || !project.ispublished) ||
                                                                    !canUnpublish(project);
            document.querySelector('.embed-button').hidden = !project.ispublic;
            document.querySelector('.buttons .collect').hidden = !project.ispublished || !ownsOrIsAdmin(project);
            document.querySelector('.buttons .flag').hidden = owns(project); // why whould you want to flag your own project?
            document.querySelector('.buttons .delete').hidden = !canDelete(project);

            document.querySelector('.buttons .open').href = projectURL(project.username, project.projectname) + '&editMode&noRun';
            document.querySelector('.buttons .download').onclick = function () { downloadProject(project); };
            document.querySelector('.buttons .share').onclick = function () { confirmShareProject(project); };
            document.querySelector('.buttons .unshare').onclick = function () { confirmUnshareProject(project); };
            document.querySelector('.buttons .publish').onclick = function () { confirmPublishProject(project); };
            document.querySelector('.buttons .unpublish').onclick = function () { confirmUnpublishProject(project); }
            document.querySelector('.buttons .embed-button').onclick = function () { embedDialog(project); }
            document.querySelector('.buttons .collect').onclick = function () { collectProject(project); }
            document.querySelector('.buttons .flag').onclick = function () { confirmFlagProject(project); }
            document.querySelector('.buttons .delete').onclick = function () { confirmDeleteProject(project); }

            // In-place notes editor
            var notes = document.querySelector('.notes');
            if (canEditNotes(project)) {
                new InPlaceEditor(
                    notes,
                    function () {
                        SnapCloud.updateNotes(
                            pageProject(),
                            notes.textContent,
                            function () {
                                if (notes.textContent == '') {
                                    notes.innerHTML = '<small>' + localizer.localize('This project has no notes') + '</small>';
                                }
                            },
                            genericError
                        );
                    }
                );
            }

            doneLoading('#wrapper');
            document.querySelector('.project').hidden = false;
        },
        genericError
    );

</script>
